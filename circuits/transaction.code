import "ecc/babyjubjubParams.code" as context
import "./ecMul.code" as ecMul
import "./ecAdd.code" as ecAdd
import "./constants/G.code" as G
import "./constants/H.code" as H
import "./mimbleWimble.code" as mimbleWimble
import "./challenge.code" as challenge
import "./schnorr.code" as schnorr
import "./spentTag.code" as spentTag
import "./lessThan.code" as lessThan
import "./constants/RANGE.code" as RANGE

def main(\
	field[2] excess, field fee, field metadata, field[2] sigScalar, field[2] sigPoint, \
	field[2] tags, field[2] outputTXO, field[2] changeTXO, \
	private field[2] myRandoms, private field[2] myValues \
) -> (field):
  // Retrieve constants
  RANGE = RANGE()
  G = G()
  H = H()

  // Get transaction hash
  field e = challenge(excess[1], sigPoint[1], fee, metadata)

  // Check Schnorr sigScalar
  1 == schnorr(sigScalar, sigPoint, e, excess)

  // Fee should be less than 2^52
  1 == lessThan(fee, RANGE)

  // Get input TXO from r,v
  field totalRandom = 0
  field totalValue = 0
  for field i in 0..2 do
    // TXOs can be aggregated into one input TXO
    totalRandom = if tags[i] == 0 then totalRandom  else totalRandom + myRandoms[i] fi
    totalValue = if tags[i] == 0 then totalValue else totalValue + myValues[i] fi
    // Prove that the spentTag is derived from the inputKey
    tags[i] == if tags[i] == 0 then 0 else spentTag(myRandoms[i], myValues[i]) fi
  endfor

  field[2] inputTXO = ecAdd(ecMul(totalRandom, G), ecMul(totalValue, H))


  // Secure that this transaction follows the MimbleWimble protocol
  1 == mimbleWimble(inputTXO, excess, outputTXO, changeTXO, fee)
  return 1
