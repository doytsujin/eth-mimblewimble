import "ecc/babyjubjubParams.code" as context
import "ecc/edwardsOnCurve.code" as onCurve
import "utils/pack/pack256.code" as pack
import "../../circuits/ecAdd.code" as ecAdd
import "../../circuits/ecMul.code" as ecMul
import "../../circuits/constants/G.code" as G
import "../../circuits/constants/H.code" as H
import "../../circuits/rangeProof.code" as rangeProof
import "../../circuits/challenge.code" as challenge
import "../../circuits/transaction.code" as transaction
import "../../circuits/lessThan.code" as lessThan
import "./tx.code" as txData

def testLessThan() -> (field):
  1 == lessThan(10, 20)
  0 == lessThan(20, 10)
  return 1

def testECMul() -> (field):
  field[2] G = G()
  field[2] H = H()
  context = context()
  field[2] rG1 = ecMul(1,G)
  field[2] rG2 = ecMul(2,G)
  field[2] vH1 = ecMul(3,H)
  field[2] vH2 = ecMul(4,H)
  1 == onCurve(rG1, context)
  1 == onCurve(rG2, context)
  1 == onCurve(vH1, context)
  1 == onCurve(vH2, context)
  return 1

def testRangeProof() -> (field):
  txData = txData()
  field r = txData[13]
  field v = txData[14]
  field tag = txData[8]
  1 == rangeProof(r, v, tag)
  return 1

def testChallenge() -> (field):
  field[2] excess = [\
  19725929476198268849980347184655917349594165568759619067459776002865067679162, \
  18176056492709322498161030914492644195271497796665305161040301362898795688395\
  ]
  field[2] sigPoint = [\
  7067966385836520545033351551573859071902429032369198446264325126368434242827, \
  13490357567685217754765402168413589030668364540678213105176822096248033804466 \
  ]
  field fee = 10
  field metadata = 63106042662321134846374981
  field e = challenge(excess[1], sigPoint[1], fee, metadata)
  e == 11711192226294630940159179437332182671897406495562481424104859976886317956392
  return 1

def testTransaction() ->(field):
  txData = txData()
  field[2] kernelExcess = [txData[0], txData[1]]
  field kernelFee = txData[6]
  field kernelMetadata = txData[7]
  field[2] kernelSigScalar = [txData[2], txData[3]]
  field[2] kernelSigPoint = [txData[4], txData[5]]
  field[2] bodySpentTags = [txData[8], 1]
  field[2] bodyOutputs1 = [txData[9], txData[10]]
  field[2] bodyOutputs2 = [txData[11], txData[12]]
  field[2] secretInputRs = [txData[13], 0]
  field[2] secretInputVs = [txData[14], 0]
  1 == transaction(\
  kernelExcess, kernelFee, kernelMetadata, kernelSigScalar, kernelSigPoint, \
  bodySpentTags, bodyOutputs1, bodyOutputs2, \
  secretInputRs, secretInputVs \
  )
  return 1

def main() -> (field):
  1 == testLessThan()
  1 == testECMul()
  1 == testRangeProof()
  1 == testChallenge()
  1 == testTransaction()
  return 1
